{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { NodeTypes } from \"./ast\";\r\n\r\nfunction createParserContext(template){\r\n    return {\r\n        line:1,\r\n        column:1,\r\n        offset: 0, \r\n        source:template, // \u6B64\u5B57\u6BB5\u4F1A\u88AB\u4E0D\u505C\u7684\u8FDB\u884C\u89E3\u6790 slice\r\n        originalSource:template\r\n    }\r\n\r\n}\r\n\r\nfunction isEnd(context){\r\n    const source = context.source;\r\n    return !source; // \u5982\u679C\u89E3\u6790\u5B8C\u6BD5\u540E\u4E3A\u7A7A\u5B57\u7B26\u4E32\u65F6\u8868\u793A\u89E3\u6790\u5B8C\u6BD5\r\n}\r\n\r\nfunction getCursor(context){\r\n    let {line,column,offset} = context\r\n    return {line,column,offset}\r\n}\r\n\r\nfunction advancePositionWithMutation(context,source,endIndex){\r\n    let linesCount = 0;\r\n    let linePos = -1;\r\n    for(let i = 0; i < endIndex;i++){\r\n        if(source.charCodeAt(i) == 10){\r\n            linesCount++;\r\n            linePos = i;\r\n        }\r\n    }\r\n    context.line += linesCount\r\n    context.offset += endIndex;\r\n    context.column = linePos == -1?  context.column + endIndex : endIndex - linePos;\r\n}   \r\n\r\n\r\n\r\n\r\nfunction advanceBy(context,endIndex){\r\n    // \u6BCF\u6B21\u5220\u6389\u5185\u5BB9\u7684\u65F6\u5019 \u90FD\u8981\u66F4\u65B0\u6700\u65B0\u7684\u884C\u5217\u548C\u504F\u79FB\u91CF\u4FE1\u606F \r\n    let source = context.source\r\n    advancePositionWithMutation(context,source,endIndex);\r\n    context.source = source.slice(endIndex);\r\n}\r\nfunction parseTextData(context,endIndex){\r\n    const rawText = context.source.slice(0,endIndex);\r\n    advanceBy(context,endIndex);\r\n    return rawText;\r\n}\r\nfunction getSelection(context,start,end?){\r\n    end = end || getCursor(context);\r\n    return {\r\n        start,\r\n        end,\r\n        source: context.originalSource.slice(start.offset,end.offset)\r\n    }\r\n\r\n}\r\nfunction parseText(context){\r\n    // \u5728\u89E3\u6790\u6587\u672C\u7684\u65F6\u5019 \u8981\u770B \u540E\u9762\u5230\u54EA\u91CC\u7ED3\u675F \r\n    let endTokens = ['<','{{'];\r\n    // as {{das<dsadsadda\r\n    let endIndex = context.source.length; // \u9ED8\u8BA4\u8BA4\u4E3A\u5230\u6700\u540E\u7ED3\u675F\r\n    for(let i = 0; i < endTokens.length;i++){\r\n        let index = context.source.indexOf(endTokens[i],1);\r\n        // \u627E\u5230\u4E86 \u5E76\u4E14\u7B2C\u4E00\u6B21\u6BD4\u6574\u4E2A\u5B57\u7B26\u4E32\u5C0F\r\n        if(index !== -1 && endIndex > index){\r\n            endIndex = index;\r\n        }\r\n    }\r\n    // \u521B\u5EFA \u884C\u5217\u4FE1\u606F\r\n    const start = getCursor(context); // \u5F00\u59CB\r\n    // \u53D6\u5185\u5BB9 \r\n    const content = parseTextData(context,endIndex);\r\n    return {\r\n        type:NodeTypes.TEXT,\r\n        content:content,\r\n        loc:getSelection(context,start)\r\n    }\r\n    // \u5728\u83B7\u53D6\u7ED3\u675F\u7684\u4F4D\u7F6E\r\n}\r\n\r\nfunction parse(template){\r\n    // \u521B\u5EFA\u4E00\u4E2A\u89E3\u6790\u7684\u4E0A\u4E0B\u6587 \u6765\u8FDB\u884C\u5904\u7406 \r\n    const context = createParserContext(template);\r\n    // < \u5143\u7D20\r\n    // {{}} \u8BF4\u660E\u8868\u8FBE\u5F0F\r\n    // \u5176\u4ED6\u5C31\u662F\u6587\u672C\r\n    const nodes = [];\r\n    while(!isEnd(context)){ \r\n        const source = context.source;\r\n        let node;\r\n        if(source.startsWith('{{')){\r\n            node = 'xxx'\r\n        }else if(source[0] === '<'){ // \u6807\u7B7E\r\n            node = 'qqq'\r\n        }\r\n        // \u6587\u672C\r\n        if(!node){\r\n            node = parseText(context);\r\n        }\r\n        nodes.push(node)\r\n        console.log(nodes);\r\n        break\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function compile(template){\r\n\r\n    // \u5C06\u6A21\u677F\u8F6C\u6210\u62BD\u8C61\u8BED\u6CD5\u6811\r\n    const ast = parse(template); // \u8FD9\u91CC\u9700\u8981\u5C06html\u8BED\u6CD5\u8F6C\u6362\u6210js\u8BED\u6CD5  \u7F16\u8BD1\u539F\u7406\r\n\r\n    return ast\r\n    // \u5BF9ast\u8BED\u6CD5\u6811\u8FDB\u884C\u4E00\u4E9B\u9884\u5148\u5904\u7406 \r\n    // transform(ast); // \u4F1A\u751F\u6210\u4E00\u4E9B\u4FE1\u606F\r\n\r\n\r\n    // // \u4EE3\u7801\u751F\u6210\r\n    // return generate(ast); // \u6700\u7EC8\u751F\u6210\u4EE3\u7801  \u548Cvue\u7684\u8FC7\u7A0B\u4E00\u6837\r\n\r\n\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEA,+BAA6B,UAAS;AAClC,WAAO;AAAA,MACH,MAAK;AAAA,MACL,QAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAO;AAAA,MACP,gBAAe;AAAA,IACnB;AAAA,EAEJ;AAEA,iBAAe,SAAQ;AACnB,UAAM,SAAS,QAAQ;AACvB,WAAO,CAAC;AAAA,EACZ;AAEA,qBAAmB,SAAQ;AACvB,QAAI,EAAC,MAAK,QAAO,WAAU;AAC3B,WAAO,EAAC,MAAK,QAAO,OAAM;AAAA,EAC9B;AAEA,uCAAqC,SAAQ,QAAO,UAAS;AACzD,QAAI,aAAa;AACjB,QAAI,UAAU;AACd,aAAQ,IAAI,GAAG,IAAI,UAAS,KAAI;AAC5B,UAAG,OAAO,WAAW,CAAC,KAAK,IAAG;AAC1B;AACA,kBAAU;AAAA,MACd;AAAA,IACJ;AACA,YAAQ,QAAQ;AAChB,YAAQ,UAAU;AAClB,YAAQ,SAAS,WAAW,KAAK,QAAQ,SAAS,WAAW,WAAW;AAAA,EAC5E;AAKA,qBAAmB,SAAQ,UAAS;AAEhC,QAAI,SAAS,QAAQ;AACrB,gCAA4B,SAAQ,QAAO,QAAQ;AACnD,YAAQ,SAAS,OAAO,MAAM,QAAQ;AAAA,EAC1C;AACA,yBAAuB,SAAQ,UAAS;AACpC,UAAM,UAAU,QAAQ,OAAO,MAAM,GAAE,QAAQ;AAC/C,cAAU,SAAQ,QAAQ;AAC1B,WAAO;AAAA,EACX;AACA,wBAAsB,SAAQ,OAAM,KAAK;AACrC,UAAM,OAAO,UAAU,OAAO;AAC9B,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA,QAAQ,QAAQ,eAAe,MAAM,MAAM,QAAO,IAAI,MAAM;AAAA,IAChE;AAAA,EAEJ;AACA,qBAAmB,SAAQ;AAEvB,QAAI,YAAY,CAAC,KAAI,IAAI;AAEzB,QAAI,WAAW,QAAQ,OAAO;AAC9B,aAAQ,IAAI,GAAG,IAAI,UAAU,QAAO,KAAI;AACpC,UAAI,QAAQ,QAAQ,OAAO,QAAQ,UAAU,IAAG,CAAC;AAEjD,UAAG,UAAU,MAAM,WAAW,OAAM;AAChC,mBAAW;AAAA,MACf;AAAA,IACJ;AAEA,UAAM,QAAQ,UAAU,OAAO;AAE/B,UAAM,UAAU,cAAc,SAAQ,QAAQ;AAC9C,WAAO;AAAA,MACH,MAAK;AAAA,MACL;AAAA,MACA,KAAI,aAAa,SAAQ,KAAK;AAAA,IAClC;AAAA,EAEJ;AAEA,iBAAe,UAAS;AAEpB,UAAM,UAAU,oBAAoB,QAAQ;AAI5C,UAAM,QAAQ,CAAC;AACf,WAAM,CAAC,MAAM,OAAO,GAAE;AAClB,YAAM,SAAS,QAAQ;AACvB,UAAI;AACJ,UAAG,OAAO,WAAW,IAAI,GAAE;AACvB,eAAO;AAAA,MACX,WAAS,OAAO,OAAO,KAAI;AACvB,eAAO;AAAA,MACX;AAEA,UAAG,CAAC,MAAK;AACL,eAAO,UAAU,OAAO;AAAA,MAC5B;AACA,YAAM,KAAK,IAAI;AACf,cAAQ,IAAI,KAAK;AACjB;AAAA,IACJ;AAAA,EAEJ;AAGO,mBAAiB,UAAS;AAG7B,UAAM,MAAM,MAAM,QAAQ;AAE1B,WAAO;AAAA,EASX;",
  "names": []
}
