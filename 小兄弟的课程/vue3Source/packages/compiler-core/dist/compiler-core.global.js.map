{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { NodeTypes } from \"./ast\";\r\n\r\nfunction createParseContext(template) {\r\n  return {\r\n    line: 1,\r\n    colum: 1,\r\n    offset: 0,\r\n    source: template, //\u6B64\u5B57\u6BB5\u4F1A\u88AB\u4E0D\u505C\u7684\u8FDB\u884C\u89E3\u6790 slice\r\n    originalSource: template,\r\n  };\r\n}\r\n\r\nfunction isEnd(context) {\r\n  const source = context.source;\r\n  return !source; //\u5982\u679C\u89E3\u6790\u5B8C\u6BD5\u540E\u4E3A\u7A7A\u5B57\u7B26\u4E32\u8868\u793A\u89E3\u6790\u5B8C\u6BD5\r\n}\r\n\r\nfunction getCursor(context) {\r\n  let { line, colum, offset } = context;\r\n  return { line, colum, offset };\r\n}\r\n\r\nfunction advancePositionWithMutation(context, source, endIndex) {\r\n  let linesCount = 0;\r\n\r\n  let linePos = -1; //\u8BB0\u5F55\u6362\u884C\u7684\u7B2C\u4E00\u4E2A\u5B57\u6BCD\r\n\r\n  for (let i = 0; i < endIndex; i++) {\r\n    if (source.charCodeAt(i) == 10) {\r\n      //\u56DE\u8F66\u662F3  \u6362\u884C\u662F10\r\n      linesCount++;\r\n      linePos = i;\r\n    }\r\n  }\r\n  context.line += linesCount;\r\n  context.offset += endIndex;\r\n\r\n  //\u7B2C\u4E00\u79CD\u6CA1\u6709\u6362\u884C  123456\r\n  //\u6362\u884C\u540E    123345\r\n  //        todo45666  \u8FD9\u79CD\u504F\u79FB\u91CF\u5C31\u662F\u672B\u5C3E\u51CF\u53BB\u6362\u884C\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684index,\u504F\u79FB\u91CF\u5C31\u662Ftodo\u6587\u5B57\u533A\u57DF\r\n\r\n  context.colum =\r\n    linePos === -1 ? context.colum + endIndex : endIndex - linePos;\r\n}\r\n\r\nfunction advanceBy(context, endIndex) {\r\n  //\u6BCF\u6B21\u5220\u9664\u5185\u5BB9\u7684\u65F6\u5019 \u90FD\u8981\u66F4\u65B0\u6700\u65B0\u7684\u884C\u5217\u548C\u504F\u79FB\u91CF\u4FE1\u606F\r\n  let source = context.source;\r\n  advancePositionWithMutation(context, source, endIndex);\r\n\r\n  context.source = context.source.slice(endIndex);\r\n}\r\n\r\nfunction parseTextData(context, endIndex) {\r\n  const rawText = context.source.slice(0, endIndex);\r\n  //\u628A\u53D6\u51FA\u7684\u503C\u5220\u9664\r\n  advanceBy(context, endIndex);\r\n  console.log(rawText);\r\n\r\n  return rawText;\r\n}\r\n\r\nfunction getSelection(context, start, end?) {\r\n  end = end || getCursor(context);\r\n  return {\r\n    start,\r\n    end,\r\n    source: context.originalSource.slice(start.offset, end.offset),\r\n  };\r\n}\r\n\r\nfunction parseText(context) {\r\n  //\u5728\u89E3\u6790\u6587\u672C\u7684\u65F6\u5019\u8981\u770B\u540E\u9762\u5230\u54EA\u91CC\u7ED3\u675F  'abc<div></div>{{data}}'\r\n  let endTokens = [\"<\", \"{{\"];\r\n\r\n  //todo \u7528\u5047\u8BBE\u6CD5 \u9ED8\u8BA4\u6700\u540E\u4E00\u4E2A\u662F\u7ED3\u675F\r\n  let endIndex = context.source.length;\r\n\r\n  for (let i = 0; i < endTokens.length; i++) {\r\n    let index = context.source.indexOf(endTokens[i], 1);\r\n\r\n    if (index !== -1 && endIndex > index) {\r\n      //\u5B58\u5728\u4E14index\u5C0F\u4E8E\u6587\u672C\u957F\u5EA6)\r\n      endIndex = index;\r\n    }\r\n  }\r\n\r\n  //\u521B\u5EFA\u884C\u5217\u4FE1\u606F\r\n  const start = getCursor(context); //\u5F00\u59CB\r\n\r\n  //\u53D6\u5185\u5BB9\r\n  const content = parseTextData(context, endIndex);\r\n  return {\r\n    type: NodeTypes.TEXT,\r\n    content: content,\r\n    loc: getSelection(context, start),\r\n  };\r\n}\r\n\r\nfunction parse(template) {\r\n  //\u521B\u5EFA\u4E00\u4E2A\u89E3\u6790\u7684\u4E0A\u4E0B\u6587,\u6765\u8FDB\u884C\u5904\u7406\r\n  const context = createParseContext(template);\r\n\r\n  //<\u5143\u7D20\r\n  //{{}}\u8868\u8FBE\u5F0F\r\n  //\u5176\u4ED6\u5C31\u662F\u6587\u672C\r\n\r\n  const nodes = [];\r\n  while (!isEnd(context)) {\r\n    const source = context.source;\r\n    let node;\r\n    if (source.startsWith(\"{{\")) {\r\n      node = \"xx\";\r\n    } else if (source[0] === \"<\") {\r\n      //\u6807\u7B7E\r\n      node = \"qq\";\r\n    }\r\n    //\u6587\u672C\r\n    if (!node) {\r\n      node = parseText(context);\r\n    }\r\n    nodes.push(node);\r\n    console.log(nodes);\r\n\r\n    break;\r\n  }\r\n}\r\n\r\nexport function compile(template) {\r\n  //\u5C06\u6A21\u677F\u8F6C\u6362\u6210\u62BD\u8C61\u8BED\u6CD5\u6811\r\n  const ast = parse(template); //\u9700\u8981\u5C06HTML\u8BED\u6CD5\u8F6C\u6362\u6210JS\u8BED\u6CD5 \u7F16\u8BD1\u539F\u7406\r\n  return ast;\r\n  //\u5BF9ast\u8BED\u6CD5\u6811\u8FDB\u884C\u4E00\u4E9B\u9884\u5148\u5904\u7406\r\n  // transform(ast);//\u4F1A\u751F\u6210\u4E00\u4E9B\u4FE1\u606F\r\n\r\n  // return generate(ast);//\u6700\u7EC8\u8FD4\u56DE\u751F\u6210\u4EE3\u7801\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEA,8BAA4B,UAAU;AACpC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,gBAAgB;AAAA,IAClB;AAAA,EACF;AAEA,iBAAe,SAAS;AACtB,UAAM,SAAS,QAAQ;AACvB,WAAO,CAAC;AAAA,EACV;AAEA,qBAAmB,SAAS;AAC1B,QAAI,EAAE,MAAM,OAAO,WAAW;AAC9B,WAAO,EAAE,MAAM,OAAO,OAAO;AAAA,EAC/B;AAEA,uCAAqC,SAAS,QAAQ,UAAU;AAC9D,QAAI,aAAa;AAEjB,QAAI,UAAU;AAEd,aAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AACjC,UAAI,OAAO,WAAW,CAAC,KAAK,IAAI;AAE9B;AACA,kBAAU;AAAA,MACZ;AAAA,IACF;AACA,YAAQ,QAAQ;AAChB,YAAQ,UAAU;AAMlB,YAAQ,QACN,YAAY,KAAK,QAAQ,QAAQ,WAAW,WAAW;AAAA,EAC3D;AAEA,qBAAmB,SAAS,UAAU;AAEpC,QAAI,SAAS,QAAQ;AACrB,gCAA4B,SAAS,QAAQ,QAAQ;AAErD,YAAQ,SAAS,QAAQ,OAAO,MAAM,QAAQ;AAAA,EAChD;AAEA,yBAAuB,SAAS,UAAU;AACxC,UAAM,UAAU,QAAQ,OAAO,MAAM,GAAG,QAAQ;AAEhD,cAAU,SAAS,QAAQ;AAC3B,YAAQ,IAAI,OAAO;AAEnB,WAAO;AAAA,EACT;AAEA,wBAAsB,SAAS,OAAO,KAAM;AAC1C,UAAM,OAAO,UAAU,OAAO;AAC9B,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,QAAQ,QAAQ,eAAe,MAAM,MAAM,QAAQ,IAAI,MAAM;AAAA,IAC/D;AAAA,EACF;AAEA,qBAAmB,SAAS;AAE1B,QAAI,YAAY,CAAC,KAAK,IAAI;AAG1B,QAAI,WAAW,QAAQ,OAAO;AAE9B,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,UAAI,QAAQ,QAAQ,OAAO,QAAQ,UAAU,IAAI,CAAC;AAElD,UAAI,UAAU,MAAM,WAAW,OAAO;AAEpC,mBAAW;AAAA,MACb;AAAA,IACF;AAGA,UAAM,QAAQ,UAAU,OAAO;AAG/B,UAAM,UAAU,cAAc,SAAS,QAAQ;AAC/C,WAAO;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA,KAAK,aAAa,SAAS,KAAK;AAAA,IAClC;AAAA,EACF;AAEA,iBAAe,UAAU;AAEvB,UAAM,UAAU,mBAAmB,QAAQ;AAM3C,UAAM,QAAQ,CAAC;AACf,WAAO,CAAC,MAAM,OAAO,GAAG;AACtB,YAAM,SAAS,QAAQ;AACvB,UAAI;AACJ,UAAI,OAAO,WAAW,IAAI,GAAG;AAC3B,eAAO;AAAA,MACT,WAAW,OAAO,OAAO,KAAK;AAE5B,eAAO;AAAA,MACT;AAEA,UAAI,CAAC,MAAM;AACT,eAAO,UAAU,OAAO;AAAA,MAC1B;AACA,YAAM,KAAK,IAAI;AACf,cAAQ,IAAI,KAAK;AAEjB;AAAA,IACF;AAAA,EACF;AAEO,mBAAiB,UAAU;AAEhC,UAAM,MAAM,MAAM,QAAQ;AAC1B,WAAO;AAAA,EAKT;",
  "names": []
}
