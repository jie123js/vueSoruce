{"code":"export function patchEvent(el, key, nextVal) {\r\n    const invokers = el._vei || (el._vei = {}); // 用来缓存绑定的事件\r\n    const exists = invokers[key];\r\n    if (exists && nextVal) { // el.addEventListener('click')\r\n        exists.value = nextVal;\r\n    }\r\n    else {\r\n        const eventName = key.slice(2).toLowerCase();\r\n        if (nextVal) {\r\n            const fn = invokers[key] = createInvoker(nextVal);\r\n            el.addEventListener(eventName, fn);\r\n        }\r\n        else {\r\n            el.removeEventListener(eventName, exists); //移除函数\r\n        }\r\n    }\r\n    // let fn = () =》{ fn.xxx()}\r\n    // fn.xxx = preFn\r\n    // el.addEventListenr(fn) \r\n    // fn.xxx = nextVal\r\n}\r\nfunction createInvoker(fn) {\r\n    const invoker = (e) => { invoker.value(e); };\r\n    invoker.value = fn;\r\n    return invoker;\r\n}\r\n//# sourceMappingURL=event.js.map","references":[],"map":"{\"version\":3,\"file\":\"event.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../packages/runtime-dom/src/modules/event.ts\"],\"names\":[],\"mappings\":\"AAAA,MAAM,UAAU,UAAU,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO;IACvC,MAAM,QAAQ,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,YAAY;IACxD,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC7B,IAAI,MAAM,IAAI,OAAO,EAAE,EAAE,+BAA+B;QACpD,MAAM,CAAC,KAAK,GAAG,OAAO,CAAA;KACzB;SAAM;QACH,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,OAAO,EAAE;YACT,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;YAClD,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAC,EAAE,CAAC,CAAA;SACpC;aAAM;YACH,EAAE,CAAC,mBAAmB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM;SACpD;KACJ;IACD,4BAA4B;IAC5B,iBAAiB;IACjB,0BAA0B;IAC1B,mBAAmB;AACvB,CAAC;AACD,SAAS,aAAa,CAAC,EAAE;IACrB,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAA;IAC3C,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;IACnB,OAAO,OAAO,CAAC;AACnB,CAAC\"}"}
